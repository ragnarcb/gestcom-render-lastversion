server {
    # Define que o servidor escutará na porta 80 (HTTP padrão)
    listen 80;
    # Define o nome do servidor como localhost para desenvolvimento local
    server_name localhost;
    
    # Define o diretório base onde os arquivos estáticos serão servidos
    # Este caminho deve corresponder ao COPY ou VOLUME no Dockerfile
    root /usr/share/nginx/html;
    # Especifica qual arquivo deve ser servido por padrão
    index index.html;
    
    # Configuração principal para Single Page Application (SPA)
    # Esta configuração é essencial para frameworks como React, Vue.js, Angular
    location / {
        # try_files tenta servir o arquivo solicitado ($uri)
        # se não encontrar, tenta o diretório ($uri/)
        # se ainda não encontrar, redireciona para index.html (necessário para SPAs)
        try_files $uri $uri/ /index.html;
        
        # Previne o cache do navegador nas rotas da aplicação
        # Importante para sempre servir a versão mais recente da SPA
        add_header Cache-Control "no-store, no-cache, must-revalidate";
        add_header Pragma "no-cache";
    }
    
    # Configuração específica para arquivos estáticos (imagens, CSS, JS, etc)
    location /assets/ {
        # Define cache de 1 ano para assets estáticos
        # 'immutable' indica que o recurso nunca mudará
        expires 1y;
        add_header Cache-Control "public, immutable";
        # Desativa logs de acesso para melhor performance
        access_log off;
    }
    
    # Configurações de CORS (Cross-Origin Resource Sharing)
    # Permite requisições de diferentes origens (dominios)
    add_header 'Access-Control-Allow-Origin' '*' always;
    # Define os métodos HTTP permitidos
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    # Define os cabeçalhos HTTP permitidos nas requisições
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    
    # Tratamento especial para requisições OPTIONS (preflight CORS)
    # Necessário para requisições complexas que precisam de verificação prévia
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # Tratamento de erros
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
}